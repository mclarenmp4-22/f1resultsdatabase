import sqlite3

conn = sqlite3.connect("py/sessionresults.db")
cursor = conn.cursor()

tables = [
    "Seasons", "GrandsPrix", "Drivers", "Constructors", "Teams",
    "Engines", "Tyres", "Chassis", "EngineModels", "Circuits",
    "GrandPrixResults", "PitStopSummary", "LapByLap",
    "DriversChampionship", "ConstructorsChampionship",
    "InSeasonProgressDrivers", "InSeasonProgressConstructors", "Nationalities"
]

for table in tables:
    cursor.execute(f"DROP TABLE IF EXISTS {table}")

# === TABLE CREATION ===

cursor.execute('''CREATE TABLE Seasons (
    Season INTEGER PRIMARY KEY,
    DriversRacesCounted TEXT,
    PointsSharedForSharedCars BOOLEAN,
    GrandPrixPointsSystemDrivers TEXT,
    SprintPointsSystemDrivers TEXT,
    ConstructorsRacesCounted TEXT,
    PointsOnlyForTopScoringCar BOOLEAN,
    GrandPrixPointsSystemConstructors TEXT,
    SprintPointsSystemConstructors TEXT,
    RegulationNotes TEXT,
    MinimumWeightofCars TEXT,
    EngineType TEXT,
    Supercharging TEXT,
    MaxCylinderCapacity TEXT,
    NumberOfCylinders TEXT,
    MaxRPM TEXT,
    NumberOfEnginesAllowedPerSeason TEXT,
    FuelType TEXT,
    RefuellingAllowed TEXT,
    MaxFuelConsumption TEXT
)''')

cursor.execute('''CREATE TABLE Circuits (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    CircuitName TEXT UNIQUE,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    GrandPrixCount INTEGER DEFAULT 0,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID)
)''')

cursor.execute('''CREATE TABLE GrandsPrix (
    ID INTEGER PRIMARY KEY,
    Season INTEGER,
    GrandPrixName TEXT,
    RoundNumber INTEGER,
    CircuitName TEXT,
    Date TEXT,
    DateInDateTime TEXT,
    Laps INTEGER,
    CircuitLength TEXT,
    Weather TEXT,
    Notes TEXT,
    SprintWeekend BOOLEAN,
    EntrantsNotes TEXT,
    QualifyingNotes TEXT,
    StartingGridNotes TEXT,
    RaceResultNotes TEXT,
    SprintNotes TEXT,
    SprintGridNotes TEXT,
    CircuitID INTEGER,
    FOREIGN KEY (CircuitID) REFERENCES Circuits(ID)
)''')

cursor.execute('''CREATE TABLE Drivers (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Name TEXT UNIQUE,
    Nationality TEXT,
    Birthdate TEXT,
    Wins INTEGER DEFAULT 0,
    Podiums INTEGER DEFAULT 0,
    Poles INTEGER DEFAULT 0,
    FastestLaps INTEGER DEFAULT 0,
    Championships INTEGER DEFAULT 0,
    Points REAL DEFAULT 0,
    Starts INTEGER DEFAULT 0,
    Entries INTEGER DEFAULT 0,
    DNFs INTEGER DEFAULT 0,
    LapsLed INTEGER DEFAULT 0,
    HatTricks INTEGER DEFAULT 0,
    GrandSlams INTEGER DEFAULT 0,
    BestGridPosition INTEGER,
    BestSprintGridPosition INTEGER,
    BestQualifyingPosition INTEGER,
    BestRacePosition INTEGER,
    BestSprintPosition INTEGER,
    BestChampionshipPosition INTEGER,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    NationalityID INTEGER,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FOREIGN KEY (NationalityID) REFERENCES Nationalities(ID),
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID)
)''')

cursor.execute('''CREATE TABLE Teams (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    TeamName TEXT UNIQUE,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    Wins INTEGER DEFAULT 0,
    Podiums INTEGER DEFAULT 0,
    Poles INTEGER DEFAULT 0,
    FastestLaps INTEGER DEFAULT 0,
    LapsLed INTEGER DEFAULT 0,
    Starts INTEGER DEFAULT 0,
    Entries INTEGER DEFAULT 0,
    DNFs INTEGER DEFAULT 0,
    Points REAL DEFAULT 0,
    BestGridPosition INTEGER,
    BestSprintGridPosition INTEGER,
    BestQualifyingPosition INTEGER,
    BestRacePosition INTEGER,
    BestSprintPosition INTEGER,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID)
)''')

cursor.execute('''CREATE TABLE Constructors (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    ConstructorName TEXT UNIQUE,
    Wins INTEGER DEFAULT 0,
    Podiums INTEGER DEFAULT 0,
    Poles INTEGER DEFAULT 0,
    FastestLaps INTEGER DEFAULT 0,
    Championships INTEGER DEFAULT 0,
    Points REAL DEFAULT 0,
    Starts INTEGER DEFAULT 0,
    Entries INTEGER DEFAULT 0,
    DNFs INTEGER DEFAULT 0,
    LapsLed INTEGER DEFAULT 0,
    BestGridPosition INTEGER,
    BestSprintGridPosition INTEGER,
    BestQualifyingPosition INTEGER,
    BestRacePosition INTEGER,
    BestSprintPosition INTEGER,
    BestChampionshipPosition INTEGER,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID)
)''')

cursor.execute('''CREATE TABLE Engines (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    EngineName TEXT UNIQUE,
    Wins INTEGER DEFAULT 0,
    Podiums INTEGER DEFAULT 0,
    Poles INTEGER DEFAULT 0,
    FastestLaps INTEGER DEFAULT 0,
    Championships INTEGER DEFAULT 0,
    Points REAL DEFAULT 0,
    Starts INTEGER DEFAULT 0,
    Entries INTEGER DEFAULT 0,
    DNFs INTEGER DEFAULT 0,
    LapsLed INTEGER DEFAULT 0,
    BestGridPosition INTEGER,
    BestSprintGridPosition INTEGER,
    BestQualifyingPosition INTEGER,
    BestRacePosition INTEGER,
    BestSprintPosition INTEGER,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID)
)''')

cursor.execute('''CREATE TABLE Tyres (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    TyreName TEXT UNIQUE,
    Wins INTEGER DEFAULT 0,
    Podiums INTEGER DEFAULT 0,
    Poles INTEGER DEFAULT 0,
    FastestLaps INTEGER DEFAULT 0,
    Points REAL DEFAULT 0,
    Starts INTEGER DEFAULT 0,
    Entries INTEGER DEFAULT 0,
    DNFs INTEGER DEFAULT 0,
    LapsLed INTEGER DEFAULT 0,
    BestGridPosition INTEGER,
    BestSprintGridPosition INTEGER,
    BestQualifyingPosition INTEGER,
    BestRacePosition INTEGER,
    BestSprintPosition INTEGER,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID)
)''')

cursor.execute('''CREATE TABLE Chassis (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    ConstructorName TEXT,
    ChassisName TEXT UNIQUE,
    Wins INTEGER DEFAULT 0,
    Podiums INTEGER DEFAULT 0,
    Poles INTEGER DEFAULT 0,
    FastestLaps INTEGER DEFAULT 0,
    Points REAL DEFAULT 0,
    Starts INTEGER DEFAULT 0,
    Entries INTEGER DEFAULT 0,
    DNFs INTEGER DEFAULT 0,
    LapsLed INTEGER DEFAULT 0,
    BestGridPosition INTEGER,
    BestSprintGridPosition INTEGER,
    BestQualifyingPosition INTEGER,
    BestRacePosition INTEGER,
    BestSprintPosition INTEGER,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    ConstructorID INTEGER,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FOREIGN KEY (ConstructorID) REFERENCES Constructors(ID),
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID)
)''')

cursor.execute('''CREATE TABLE EngineModels (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    EngineMake TEXT,
    EngineModel TEXT UNIQUE,
    Wins INTEGER DEFAULT 0,
    Podiums INTEGER DEFAULT 0,
    Poles INTEGER DEFAULT 0,
    FastestLaps INTEGER DEFAULT 0,
    Championships INTEGER DEFAULT 0,
    Points REAL DEFAULT 0,
    Starts INTEGER DEFAULT 0,
    Entries INTEGER DEFAULT 0,
    DNFs INTEGER DEFAULT 0,
    LapsLed INTEGER DEFAULT 0,
    BestGridPosition INTEGER,
    BestSprintGridPosition INTEGER,
    BestQualifyingPosition INTEGER,
    BestRacePosition INTEGER,
    BestSprintPosition INTEGER,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    EngineMakeID INTEGER,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FOREIGN KEY (EngineMakeID) REFERENCES Engines(ID),
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID)
)''')

cursor.execute('''CREATE TABLE GrandPrixResults (
    grandprix TEXT,
    number INTEGER,
    driver TEXT,
    nationality TEXT,
    team TEXT,
    constructor TEXT,
    chassis TEXT,
    engine TEXT,
    enginemodel TEXT,
    tyre TEXT,
    substituteorthirddriver BOOLEAN,
    qualifyingposition INTEGER,
    qualifyingtime TEXT,
    qualifyinggap TEXT,
    qualifyingtimeinseconds REAL,
    qualifyinggapseconds REAL,
    starting_grid_position INTEGER,
    gridpenalty TEXT,
    gridpenalty_reason TEXT,
    sprintstarting_grid_position INTEGER,
    sprintgridpenalty TEXT,
    sprintgridpenalty_reason TEXT,
    fastestlap INTEGER,
    fastestlapinseconds REAL,
    fastestlapgapinseconds REAL,
    fastestlap_time TEXT,
    fastestlap_gap TEXT,
    fastestlap_lap INTEGER,
    sprintfastestlap INTEGER,
    sprintfastestlapinseconds REAL,
    sprintfastestlapgapinseconds REAL,
    sprintfastestlap_time TEXT,
    sprintfastestlap_gap TEXT,
    sprintfastestlap_lap INTEGER,
    qualifying2position INTEGER,
    qualifying2time TEXT,
    qualifying2gap REAL,
    qualifying2timeinseconds REAL,
    qualifying2laps INTEGER,
    qualifying1position INTEGER,
    qualifying1time TEXT,
    qualifying1gap REAL,
    qualifying1timeinseconds REAL,
    qualifying1laps INTEGER,
    qualifyinglaps INTEGER,
    qualifying3time TEXT,
    qualifying3gap REAL,
    qualifying3timeinseconds REAL,
    sprint_qualifyingposition INTEGER,
    sprint_qualifying1time TEXT,
    sprint_qualifying2time TEXT,
    sprint_qualifying3time TEXT,
    sprint_qualifying1gap REAL,
    sprint_qualifying2gap REAL,
    sprint_qualifying3gap REAL,
    sprint_qualifyinggap REAL,
    sprint_qualifying1timeinseconds REAL,
    sprint_qualifying2timeinseconds REAL,
    sprint_qualifying3timeinseconds REAL,
    sprint_qualifyinglaps INTEGER,
    sprint_qualifyingtime TEXT,
    sprint_qualifyingtimeinseconds REAL,
    warmupposition INTEGER,
    warmuptime TEXT,
    warmupgap TEXT,
    warmuptimeinseconds REAL,
    warmuplaps INTEGER,
    practice1position INTEGER,
    practice1time TEXT,
    practice1gap TEXT,
    practice1timeinseconds REAL,
    practice1laps INTEGER,
    practice2position INTEGER,
    practice2time TEXT,
    practice2gap TEXT,
    practice2timeinseconds REAL,
    practice2laps INTEGER,
    practice3position INTEGER,
    practice3time TEXT,
    practice3gap TEXT,
    practice3timeinseconds REAL,
    practice3laps INTEGER,
    practice4position INTEGER,
    practice4time TEXT,
    practice4gap TEXT,
    practice4timeinseconds REAL,
    practice4laps INTEGER,
    sprintposition INTEGER,
    sprintlaps INTEGER,
    sprinttime TEXT,
    sprintpoints REAL,
    sprinttimeinseconds REAL,
    sprintgap TEXT,
    sprintgapinseconds REAL,
    raceposition INTEGER,
    racelaps INTEGER,
    racetime TEXT,
    racepoints REAL,
    racetimeinseconds REAL,
    racegap TEXT,
    racegapinseconds REAL,
    penalties TEXT,
    sprint_penalties TEXT,
    driverid INTEGER,
    teamid INTEGER,
    constructorid INTEGER,
    chassisid INTEGER,
    engineid INTEGER,
    enginemodelid INTEGER,
    tyreid INTEGER,
    grandprixid INTEGER,
    nationalityid INTEGER,
    FOREIGN KEY (driverid) REFERENCES Drivers(ID),
    FOREIGN KEY (teamid) REFERENCES Teams(ID),
    FOREIGN KEY (constructorid) REFERENCES Constructors(ID),
    FOREIGN KEY (chassisid) REFERENCES Chassis(ID),
    FOREIGN KEY (engineid) REFERENCES Engines(ID),
    FOREIGN KEY (enginemodelid) REFERENCES EngineModels(ID),
    FOREIGN KEY (tyreid) REFERENCES Tyres(ID),
    FOREIGN KEY (grandprixid) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (nationalityid) REFERENCES Nationalities(ID)
)''')

cursor.execute('''CREATE TABLE PitStopSummary (
    GrandPrix TEXT,
    Number INTEGER,
    Driver TEXT,
    Constructor TEXT,
    StopNumber INTEGER,
    Lap INTEGER,
    DurationSpentInPitLane TEXT,
    TimeInSeconds REAL,
    TimeOfDayStopped TEXT,
    TotalTimeSpentInPitLane TEXT,
    TotalTimeinSeconds REAL,
    GrandPrixID INTEGER,
    DriverID INTEGER,
    ConstructorID INTEGER,
    FOREIGN KEY (GrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (DriverID) REFERENCES Drivers(ID),
    FOREIGN KEY (ConstructorID) REFERENCES Constructors(ID)
)''')

cursor.execute('''CREATE TABLE LapByLap (
    GrandPrix TEXT,
    Driver TEXT,
    Position INTEGER,
    Lap INTEGER,
    Type TEXT,
    SafetyCar BOOLEAN,
    Time TEXT,
    TimeInSeconds REAL,
    GrandPrixID INTEGER,
    DriverID INTEGER,
    FOREIGN KEY (GrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (DriverID) REFERENCES Drivers(ID)
)''')

cursor.execute('''CREATE TABLE DriversChampionship (
    ID TEXT PRIMARY KEY,
    Season INTEGER,
    Position INTEGER,
    Driver TEXT,
    Points REAL,
    OutOf REAL,
    RaceByRace TEXT,
    DriverID INTEGER,
    NationalityID INTEGER,
    FOREIGN KEY (DriverID) REFERENCES Drivers(ID),
    FOREIGN KEY (NationalityID) REFERENCES Nationalities(ID)
)''')

cursor.execute('''CREATE TABLE ConstructorsChampionship (
    ID TEXT PRIMARY KEY,
    Season INTEGER,
    Position INTEGER,
    Constructor TEXT,
    Engine TEXT,
    Points REAL,
    OutOf REAL,
    RaceByRace TEXT,
    ConstructorID INTEGER,
    EngineID INTEGER,
    EngineModelID INTEGER,
    FOREIGN KEY (ConstructorID) REFERENCES Constructors(ID),
    FOREIGN KEY (EngineID) REFERENCES Engines(ID),
    FOREIGN KEY (EngineModelID) REFERENCES EngineModels(ID)
)''')

cursor.execute('''CREATE TABLE InSeasonProgressDrivers (
    GrandPrix TEXT,
    PositionAtThisPoint INTEGER,
    Driver TEXT,
    PointsAtThisPoint REAL,
    GrandPrixID INTEGER,
    DriverID INTEGER,
    FOREIGN KEY (GrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (DriverID) REFERENCES Drivers(ID)
)''')

cursor.execute('''CREATE TABLE InSeasonProgressConstructors (
    GrandPrix TEXT,
    PositionAtThisPoint INTEGER,
    Constructor TEXT,
    Engine TEXT,
    PointsAtThisPoint REAL,
    GrandPrixID INTEGER,
    ConstructorID INTEGER,
    EngineID INTEGER,
    FOREIGN KEY (GrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (ConstructorID) REFERENCES Constructors(ID),
    FOREIGN KEY (EngineID) REFERENCES Engines(ID)
)''')

cursor.execute('''CREATE TABLE Nationalities (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    Nationality TEXT UNIQUE,
    FirstGrandPrix TEXT,
    LastGrandPrix TEXT,
    DriverCount INTEGER DEFAULT 0,
    Wins INTEGER DEFAULT 0,
    Podiums INTEGER DEFAULT 0,
    Poles INTEGER DEFAULT 0,
    FastestLaps INTEGER DEFAULT 0,
    Championships INTEGER DEFAULT 0,
    Points REAL DEFAULT 0,
    Starts INTEGER DEFAULT 0,
    Entries INTEGER DEFAULT 0,
    DNFs INTEGER DEFAULT 0,
    LapsLed INTEGER DEFAULT 0,
    BestGridPosition INTEGER,
    BestSprintGridPosition INTEGER,
    BestQualifyingPosition INTEGER,
    BestRacePosition INTEGER,
    BestSprintPosition INTEGER,
    FirstGrandPrixID INTEGER,
    LastGrandPrixID INTEGER,
    FirstDriver TEXT,
    LastDriver TEXT,
    FirstDriverID INTEGER,
    LastDriverID INTEGER,
    FOREIGN KEY (FirstGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (LastGrandPrixID) REFERENCES GrandsPrix(ID),
    FOREIGN KEY (FirstDriverID) REFERENCES Drivers(ID),
    FOREIGN KEY (LastDriverID) REFERENCES Drivers(ID)
)''')

conn.commit()
conn.close()
print("Database reset and initialized.")
